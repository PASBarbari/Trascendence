---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: namespace-creator
  namespace: {{ .Release.Namespace | default "default" }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-60"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: namespace-creator-{{ .Release.Name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-60"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: namespace-creator-{{ .Release.Name }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-60"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
subjects:
- kind: ServiceAccount
  name: namespace-creator
  namespace: {{ .Release.Namespace | default "default" }}
roleRef:
  kind: ClusterRole
  name: namespace-creator-{{ .Release.Name }}
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: batch/v1
kind: Job
metadata:
  name: ensure-namespaces-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Release.Namespace | default "default" }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-50"
    "helm.sh/hook-wait": "true"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    spec:
      serviceAccountName: namespace-creator
      restartPolicy: Never
      containers:
      - name: kubectl
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Creating namespaces..."
          for ns in login front-end chat elk redis-namespace minio pong user notifications; do
            echo "Checking namespace: $ns"
            if ! kubectl get namespace "$ns" >/dev/null 2>&1; then
              echo "Creating namespace: $ns"
              kubectl create namespace "$ns"
              echo "Namespace $ns created successfully"
            else
              echo "Namespace $ns already exists"
            fi
          done
          echo "All namespaces are ready!"
  backoffLimit: 3