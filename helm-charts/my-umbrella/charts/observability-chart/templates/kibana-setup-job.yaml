{{- if .Values.kibana.enabled }}
---
# Job to setup Kibana index patterns and configurations for Trascendence logs
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "observability-chart.fullname" . }}-kibana-setup
  namespace: {{ .Values.global.namespace.name }}
  labels:
    {{- include "observability-chart.labels" . | nindent 4 }}
    app.kubernetes.io/component: kibana-setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "10"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 10
  template:
    metadata:
      labels:
        {{- include "observability-chart.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: kibana-setup
    spec:
      restartPolicy: OnFailure
      containers:
      - name: kibana-setup
        image: curlimages/curl:8.1.2
        command:
        - /bin/sh
        - -c
        - |
          set -x
          echo "Waiting for Kibana to be ready..."
          
          # Wait for Kibana to be available with authentication
          ATTEMPTS=0
          MAX_ATTEMPTS=30
          until curl --connect-timeout 5 -k -u "elastic:changeme" -s "https://kibana.{{ .Values.global.namespace.name }}.svc.cluster.local:5601/api/status" \
            -H "Content-Type: application/json" | grep -q '"level":"available"'; do
            ATTEMPTS=$((ATTEMPTS + 1))
            if [ "$ATTEMPTS" -gt "$MAX_ATTEMPTS" ]; then
              echo "Error: Timed out waiting for Kibana to be ready after ${MAX_ATTEMPTS} attempts."
              exit 1
            fi
            echo "Kibana not ready yet (attempt ${ATTEMPTS}/${MAX_ATTEMPTS}), waiting 10 seconds..."
            sleep 10
          done
          
          echo "Kibana is ready, setting up index patterns..."
          
          # Create main index pattern for Trascendence logs
          echo "Creating main index pattern: trascendence-logs-*"
          curl -k -u "elastic:changeme" -s -X POST "https://kibana.{{ .Values.global.namespace.name }}.svc.cluster.local:5601/api/saved_objects/index-pattern/trascendence-logs-*" \
            -H "Content-Type: application/json" \
            -H "kbn-xsrf: true" \
            -d '{
              "attributes": {
                "title": "trascendence-logs-*",
                "timeFieldName": "@timestamp",
                "fields": "[{\"name\":\"@timestamp\",\"type\":\"date\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"message\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":false},{\"name\":\"log_level\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"service_name\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"namespace\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true},{\"name\":\"pod_name\",\"type\":\"string\",\"searchable\":true,\"aggregatable\":true}]"
              }
            }' || echo "Main index pattern may already exist"
          
          # Create service-specific saved searches for each Trascendence service
          for service in login chat user notifications pong frontend; do
            echo "Creating service-specific view for: ${service}"
            SERVICE_TITLE=$(echo "$service" | sed 's/./\u&/')
            curl -k -u "elastic:changeme" -s -X POST "https://kibana.{{ .Values.global.namespace.name }}.svc.cluster.local:5601/api/saved_objects/search/trascendence-${service}-logs" \
              -H "Content-Type: application/json" \
              -H "kbn-xsrf: true" \
              -d "{
                \"attributes\": {
                  \"title\": \"Trascendence ${SERVICE_TITLE} Service Logs\",
                  \"description\": \"Filtered view for ${service} service logs\",
                  \"columns\": [\"@timestamp\", \"log_level\", \"service_name\", \"message\"],
                  \"sort\": [[\"@timestamp\", \"desc\"]],
                  \"kibanaSavedObjectMeta\": {
                    \"searchSourceJSON\": \"{\\\"index\\\":\\\"trascendence-logs-*\\\",\\\"query\\\":{\\\"query\\\":\\\"service_name:'${service}'\\\",\\\"language\\\":\\\"kuery\\\"},\\\"filter\\\":[]}\"
                  }
                }
              }" || echo "Search for ${service} may already exist"
          done
          
          # Create a dashboard for log level overview
          echo "Creating log level overview dashboard"
          curl -k -u "elastic:changeme" -s -X POST "https://kibana.{{ .Values.global.namespace.name }}.svc.cluster.local:5601/api/saved_objects/dashboard/trascendence-logs-overview" \
            -H "Content-Type: application/json" \
            -H "kbn-xsrf: true" \
            -d '{
              "attributes": {
                "title": "Trascendence Logs Overview",
                "description": "Overview dashboard for all Trascendence service logs",
                "panelsJSON": "[]",
                "optionsJSON": "{\"useMargins\":true,\"syncColors\":false,\"hidePanelTitles\":false}",
                "kibanaSavedObjectMeta": {
                  "searchSourceJSON": "{\"query\":{\"query\":\"\",\"language\":\"kuery\"},\"filter\":[]}"
                }
              }
            }' || echo "Dashboard may already exist"
          
          # Set Trascendence logs as default index pattern
          echo "Setting trascendence-logs-* as default index pattern"
          curl -k -u "elastic:changeme" -s -X POST "https://kibana.{{ .Values.global.namespace.name }}.svc.cluster.local:5601/api/kibana/settings" \
            -H "Content-Type: application/json" \
            -H "kbn-xsrf: true" \
            -d '{
              "changes": {
                "defaultIndex": "trascendence-logs-*"
              }
            }' || echo "Could not set default index, it may already be set"

          echo "‚úÖ Kibana setup completed successfully!"
          echo "üìä Access Kibana at: https://kibana.trascendence.42firenze.it"
          echo "üîç Default index pattern: trascendence-logs-*"
          echo "üìù Service-specific searches created for: login, chat, user, notifications, pong, frontend"
          
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
{{- end }}
