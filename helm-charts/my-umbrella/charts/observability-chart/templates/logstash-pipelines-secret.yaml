{{- if index .Values "eck-logstash" "enabled" }}
apiVersion: v1
kind: Secret
metadata:
  name: logstash-pipelines-secret
  namespace: {{ .Values.global.namespace.name }}
  labels:
    {{- include "observability-chart.labels" . | nindent 4 }}
    app.kubernetes.io/component: logstash
type: Opaque
stringData:
  pipelines.yml: |
    - pipeline.id: beats
      path.config: "/usr/share/logstash/pipeline/beats.conf"
      
  beats.conf: |
    input {
      beats {
        port => 5044
        host => "0.0.0.0"
      }
    }
    
    filter {
      # Add Kubernetes metadata if available
      if [kubernetes] {
        mutate {
          add_field => { 
            "service_name" => "%{[kubernetes][container][name]}"
            "namespace" => "%{[kubernetes][namespace]}"
            "pod_name" => "%{[kubernetes][pod][name]}"
          }
        }
      }
      
      # Parse JSON logs from Django applications
      if [message] =~ /^\{.*\}$/ {
        json {
          source => "message"
          target => "django"
          tag_on_failure => ["_jsonparsefailure"]
        }
        
        # Extract Django fields to top level
        if [django] {
          mutate {
            add_field => {
              "log_level" => "%{[django][level]}"
              "log_module" => "%{[django][module]}"
              "log_message" => "%{[django][message]}"
            }
            add_tag => ["django_structured"]
          }
        }
      }
      
      # Add service identification based on container name
      if [kubernetes][container][name] {
        if [kubernetes][container][name] =~ /chat/ {
          mutate { add_field => { "service_type" => "chat" } }
        } else if [kubernetes][container][name] =~ /login/ {
          mutate { add_field => { "service_type" => "login" } }
        } else if [kubernetes][container][name] =~ /user/ {
          mutate { add_field => { "service_type" => "user" } }
        } else if [kubernetes][container][name] =~ /pong/ {
          mutate { add_field => { "service_type" => "pong" } }
        } else if [kubernetes][container][name] =~ /notification/ {
          mutate { add_field => { "service_type" => "notifications" } }
        }
      }
      
      # Clean up unwanted fields
      mutate {
        remove_field => [ "agent", "ecs", "input", "host" ]
      }
    }
    
    output {
      # Route logs to different indices based on namespace
      if [kubernetes][namespace] == "default" {
        elasticsearch {
          hosts => ["https://eck-elasticsearch-es-http.observability.svc.cluster.local:9200"]
          ssl => true
          ssl_certificate_verification => false
          user => "elastic"
          password => "${ELASTICSEARCH_PASSWORD}"
          index => "trascendence-logs-%{+YYYY.MM.dd}"
        }
      } else {
        elasticsearch {
          hosts => ["https://eck-elasticsearch-es-http.observability.svc.cluster.local:9200"]
          ssl => true
          ssl_certificate_verification => false
          user => "elastic"
          password => "${ELASTICSEARCH_PASSWORD}"
          index => "k8s-logs-%{[kubernetes][namespace]}-%{+YYYY.MM.dd}"
        }
      }
      
      # Debug output for development (comment out in production)
      stdout { codec => rubydebug }
    }
{{- end }}
