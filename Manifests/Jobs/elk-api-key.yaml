apiVersion: batch/v1
kind: Job
metadata:
  name: generate-fleet-tokens
  namespace: elk
spec:
  template:
    spec:
      serviceAccountName: api-key-generator
      containers:
      - name: generate-tokens
        image: debian:latest
        command: ["sh", "-c"]
        args:
          - |
            set -eux
            apt-get update && apt-get install -y curl jq
            apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg
            curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
            chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg # allow unprivileged APT programs to read this keyring
            echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
            chmod 644 /etc/apt/sources.list.d/kubernetes.list
            apt-get update && apt-get install -y kubectl
            
            # Get Elasticsearch password
            ELASTIC_PASSWORD=$(kubectl get secret trascendence-es-elastic-user -n elk -o jsonpath='{.data.elastic}' | base64 --decode)
            
            # Generate API Key
            API_KEY=$(curl -k -u elastic:$ELASTIC_PASSWORD -X POST "https://trascendence-es-http:9200/_security/api_key" -H "Content-Type: application/json" -d'
            {
              "name": "fleet-server-api-key",
              "role_descriptors": {
                "fleet-server-role": {
                  "cluster": ["all"],
                  "index": [
                    {
                      "names": ["*"],
                      "privileges": ["all"]
                    }
                  ]
                }
              }
            }' | jq -r '.api_key')
            
            # Generate Fleet Server service token
            SERVICE_TOKEN=$(curl -k -u elastic:$ELASTIC_PASSWORD -X POST "https://trascendence-es-http:9200/_security/service/elastic/fleet-server/credential/token" -H "Content-Type: application/json" | jq -r '.token.value')
            
            # Store tokens in secrets
            kubectl delete secret elasticsearch-api-key -n elk --ignore-not-found
            kubectl create secret generic elasticsearch-api-key --from-literal=api-key=$API_KEY -n elk
            
            if [ -z "$SERVICE_TOKEN" ]; then
              echo "Failed to generate Fleet Server service token"
              exit 1
            fi

            kubectl delete secret fleet-server-service-token -n elk --ignore-not-found
            kubectl create secret generic fleet-server-service-token --from-literal=token=$SERVICE_TOKEN -n elk
        env:
        - name: ELASTIC_USERNAME
          value: "elastic"
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trascendence-es-elastic-user
              key: elastic
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-key-generator
  namespace: elk
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: elk
  name: api-key-generator-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "delete"]
