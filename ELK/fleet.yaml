apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: fleet-server
  namespace: elk
spec:
  version: 8.13.4
  elasticsearchRefs:
  - name: trascendence
  config:
    outputs:
      default:
        api_key: ${ELASTICSEARCH_API_KEY}
        hosts: ["https://elasticsearch:9200"]
    fleet:
      hosts: ["https://trascendence-kb-http:5601"]
  daemonSet:
    podTemplate:
      spec:
        containers:
        - name: agent
          env:
          - name: FLEET_SERVER_ENABLE
            value: "true"
          - name: FLEET_SERVER_CERT
            valueFrom:
              secretKeyRef:
                name: fleet-server-cert
                key: tls.crt
          - name: FLEET_SERVER_CERT_KEY
            valueFrom:
              secretKeyRef:
                name: fleet-server-cert
                key: tls.key
          - name: FLEET_SERVER_ELASTICSEARCH_HOST
            value: "https://elasticsearch:9200"
          - name: FLEET_SERVER_ELASTICSEARCH_CA
            valueFrom:
              secretKeyRef:
                name: trascendence-kb-es-ca
                key: ca.crt
---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-elasticsearch-api-key
  namespace: elk
spec:
  template:
    spec:
      serviceAccountName: api-key-generator
      containers:
      - name: generate-api-key
        image: bitnami/kubectl:latest
        command: ["sh", "-c"]
        args:
          - |
            apt-get update && apt-get install -y curl jq
            ELASTIC_PASSWORD=$(kubectl get secret elastic-credentials -n elk -o jsonpath='{.data.ELASTIC_PASSWORD}' | base64 --decode)
            API_KEY=$(curl -k -u elastic:$ELASTIC_PASSWORD -X POST "https://trascendence-es-http:9200/_security/api_key" -H "Content-Type: application/json" -d'
            {
              "name": "fleet-server-api-key",
              "role_descriptors": {
                "fleet-server-role": {
                  "cluster": ["all"],
                  "index": [
                    {
                      "names": ["*"],
                      "privileges": ["all"]
                    }
                  ]
                }
              }
            }' | jq -r '.api_key')
            kubectl create secret generic elasticsearch-api-key --from-literal=api-key=$API_KEY -n elk
        env:
        - name: ELASTIC_USERNAME
          valueFrom:
            secretKeyRef:
              name: elastic-credentials
              key: ELASTIC_USERNAME
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: elastic-credentials
              key: ELASTIC_PASSWORD
      restartPolicy: OnFailure
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: api-key-generator
  namespace: elk
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: elk
  name: api-key-generator-role
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: api-key-generator-rolebinding
  namespace: elk
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: api-key-generator-role
subjects:
- kind: ServiceAccount
  name: api-key-generator
  namespace: elk