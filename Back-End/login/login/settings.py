"""
Django settings for login project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os
from datetime import datetime
import secrets

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-kp7qs)0l1ie$%muo93+829po%pe9*gz8z8ah6dy0)cskj-5l*c')
FIELD_ENCRYPTION_KEY = os.getenv('FIELD_ENCRYPTION_KEY', 'Hog-t3arjmkEOl49iagysJdpmvu9eJLkbSgDn-TNNLU=')
#'django-insecure-kp7qs)0l1ie$%muo93+829po%pe9*gz8z8ah6dy0)cskj-5l*c'
API_KEY = os.getenv('API_KEY', '123')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', True)

# Simple microservices definition
Microservices = {
	'Login': os.getenv('LOGIN_URL', 'http://localhost:8000'),
	'Chat': os.getenv('CHAT_URL', 'http://localhost:8001'),
	'Users': os.getenv('USER_URL', 'http://localhost:8002'),
	'Notifications': os.getenv('NOTIFICATIONS_URL', 'http://localhost:8003'),
	'Pong': os.getenv('PONG_URL', 'http://localhost:8004'),
}

K8S_ALLOWED_HOSTS = os.environ.get('K8S_ALLOWED_HOSTS', '10.0.0.0/8,172.16.0.0/12,192.168.0.0/16').split(',')

# Get service hosts from environment
K8S_SERVICE_HOSTS_RAW = os.getenv('K8S_SERVICE_HOSTS', '').split(',') if os.getenv('K8S_SERVICE_HOSTS') else []

# For ALLOWED_HOSTS: hostnames only (strip schemes/ports)
K8S_SERVICE_HOSTS_CLEAN = []
for host in K8S_SERVICE_HOSTS_RAW:
	if host:
		# Remove http:// or https:// if present
		clean_host = host.replace('http://', '').replace('https://', '')
		# Remove port if present
		if ':' in clean_host:
			clean_host = clean_host.split(':')[0]
		K8S_SERVICE_HOSTS_CLEAN.append(clean_host)

# For CORS: full URLs with schemes
K8S_SERVICE_HOSTS_WITH_SCHEME = [f"http://{host}" for host in K8S_SERVICE_HOSTS_RAW if host]

K8S_SERVICE_HOSTS = K8S_SERVICE_HOSTS_CLEAN

# Add additional service hosts from environment if provided
# if os.environ.get('K8S_SERVICE_HOSTS'):
# 	additional_hosts = os.environ.get('K8S_SERVICE_HOSTS').split(',')
# 	K8S_SERVICE_HOSTS.extend([host.strip() for host in additional_hosts if host.strip()])

ALLOWED_HOSTS = ['*']
# 	'localhost',
# 	'localhost:3000',
# 	'127.0.0.1',
# 	'[::1]',
# 	'trascendence.42firenze.it',
# 	Microservices['Login'],
# 	Microservices['Chat'],
# 	Microservices['Users'],
# 	Microservices['Notifications'],
# 	Microservices['Pong'],
# ]  + K8S_SERVICE_HOSTS

# CORS_ALLOWED_ORIGINS = [
# 	'http://localhost:3000',
# 	'http://localhost',
# 	'http://127.0.0.1',
# 	'http://[::1]',
# 	'https://trascendence.42firenze.it',
# 	Microservices['Login'],
# 	Microservices['Chat'],
# 	Microservices['Users'],
# 	Microservices['Notifications'],
# 	Microservices['Pong'],
# ]  + K8S_SERVICE_HOSTS_WITH_SCHEME
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://localhost',
    'http://127.0.0.1',
    'http://[::1]',
    'https://trascendence.42firenze.it',
    # Aggiungi IP privati per HTTPS
    'https://10.0.2.15',  # L'IP specifico della tua VM
    # O meglio ancora, patterns per tutti gli IP privati:
    'http://10.*',
    'https://10.*',
    'http://192.168.*',
    'https://192.168.*',
    'http://172.16.*',
    'https://172.16.*',
    'http://172.17.*',
    'https://172.17.*',
    'http://172.18.*',
    'https://172.18.*',
    # Continua per tutti i range 172.16.x.x fino a 172.31.x.x
	'http://localhost:8443',
    'http://127.0.0.1:8443',
    'http://10.0.2.15:8443',
    'http://10.0.2.15.xip.io:8443',
    'http://10.11.*.xip.io:8443',
    Microservices['Login'],
    Microservices['Chat'],
    Microservices['Users'],
    Microservices['Notifications'],
    Microservices['Pong'],
]  + K8S_SERVICE_HOSTS_WITH_SCHEME

CORS_ALLOW_HEADERS = [
	'accept',
	'accept-encoding',
	'authorization',
	'content-type',
	'dnt',
	'origin',
	'user-agent',
	'x-csrftoken',
	'x-requested-with',
]

# Application definition

INSTALLED_APPS = [
	'django_prometheus', 
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'rest_framework',
	'rest_framework_simplejwt',
	'drf_yasg',
	'my_login',
	'corsheaders',
	'oauth2_provider',
]

MIDDLEWARE = [
	'django_prometheus.middleware.PrometheusBeforeMiddleware',  # Add at the top
	'my_login.middleware.HealthCheckMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add at the end of middleware list
MIDDLEWARE.append('django_prometheus.middleware.PrometheusAfterMiddleware')

ROOT_URLCONF = 'login.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'login.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
	'default': {
	'ENGINE': 'django.db.backends.postgresql',
	'NAME': os.getenv('POSTGRES_DB', 'login_db'),
	'USER': os.getenv('POSTGRES_USER', 'pasquale'),
	'PASSWORD': os.getenv('POSTGRES_PASSWORD', '123'),
	'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
	'PORT': os.getenv('POSTGRES_PORT', '5435'),
	},
	'backup': {
	'ENGINE': 'django.db.backends.sqlite3',
	'NAME': str(BASE_DIR / 'db.sqlite3'),
	}
}

#user model
AUTH_USER_MODEL = 'my_login.AppUser'

REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'rest_framework_simplejwt.authentication.JWTAuthentication',
		'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
	),
	'DEFAULT_PERMISSION_CLASSES': (
		'rest_framework.permissions.IsAuthenticated',
	),
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

OAUTH2_PROVIDER = {
	'ACCESS_TOKEN_EXPIRE_SECONDS': 36000,
	'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,
	'REFRESH_TOKEN_EXPIRE_SECONDS': 36000,
	'ROTATE_REFRESH_TOKENS': True,
	'SCOPES': {
		'read': 'Read scope',
		'write': 'Write scope',
		'groups': 'Access to your groups',
	},
	# 'OAUTH2_VALIDATOR_CLASS': 'oauth2_provider.oauth2_validators.OAuth2Validator',
	'OAUTH2_VALIDATOR_CLASS': 'my_login.validations.CustomOAuth2Validator',
}

SIMPLE_JWT = {
	'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
	'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
	'ROTATE_REFRESH_TOKENS': True,
	'BLACKLIST_AFTER_ROTATION': True,
	'ALGORITHM': 'HS256',
	# 'ISSUER': 'login',
	'SIGNING_KEY': SECRET_KEY,
	'VERIFYING_KEY': None,
	'AUTH_HEADER_TYPES': ('Bearer',),
	'USER_ID_FIELD': 'user_id',
	'USER_ID_CLAIM': 'user_id',
	'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
	'TOKEN_TYPE_CLAIM': 'token_type',
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

client = {
	'CLIENT_ID' : os.getenv('CLIENT_ID', ''),
	'CLIENT_SECRET' : os.getenv('CLIENT_SECRET', ''),
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Changed from '/static/'

# Add this to define where Django should look for static files
#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, "static"),
#]
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SERVICE_PASSWORD = os.getenv('SERVICE_PASSWORD','123') # this is the password that the service will use to authenticate itself to the OAuth2 server

ADMIN = {
	'username': os.getenv('ADMIN_USERNAME', 'admin'),
	'email': os.getenv('ADMIN_EMAIL', 'admin@admin.com'),
	'password': os.getenv('ADMIN_PASSWORD', 'admin'),
}

OAUTH2_PROVIDERS = {
	'GOOGLE' : {
		'redirect_uri': 'http://trascendence.42firenze.it/api/login/login/oauth/callback/google/',
		'authorization_url': "https://accounts.google.com/o/oauth2/v2/auth",
		'token_url': "https://oauth2.googleapis.com/token",
		'scope': "openid email profile",
		'user_info_url': "https://www.googleapis.com/oauth2/v1/userinfo?alt=json",
		'client_id': os.getenv('GOOGLE_CLIENT_ID', 'pippo'),
		'client_secret': os.getenv('GOOGLE_CLIENT_SECRET', 'moltosegreto'),
	},
	'42' : {
		'redirect_uri': 'http://trascendence.42firenze.it/api/login/login/oauth/callback/42/',
		'authorization_url': "https://api.intra.42.fr/oauth/authorize",
		'token_url': "https://api.intra.42.fr/oauth/token",
		'scope': "public",
		'user_info_url': "https://api.intra.42.fr/v2/me",
		'client_id': os.getenv('42_CLIENT_ID', 'pippo'),
		'client_secret': os.getenv('42_CLIENT_SECRET', 'moltosegreto'),
	},
}

# ELK-Optimized Logging Configuration for login service
# This configuration provides standardized logging for the ELK Stack

import os
from datetime import datetime

# Logging environment configuration
USE_JSON_LOGGING = os.getenv('USE_JSON_LOGGING', 'true').lower() == 'true'
USE_FILE_LOGGING = os.getenv('USE_FILE_LOGGING', 'false').lower() == 'true'
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')

# Create logs directory for file logging (if enabled)
if USE_FILE_LOGGING:
    LOG_DIR = os.path.join(BASE_DIR, 'logs')
    os.makedirs(LOG_DIR, exist_ok=True)
    ERROR_LOG = os.path.join(LOG_DIR, f'error_{datetime.now().strftime("%Y-%m-%d")}.log')
    INFO_LOG = os.path.join(LOG_DIR, f'info_{datetime.now().strftime("%Y-%m-%d")}.log')
else:
    ERROR_LOG = None
    INFO_LOG = None

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'json_kubernetes': {
            'format': '{"timestamp": "%(asctime)s", "level": "%(levelname)s", "logger": "%(name)s", "module": "%(module)s", "message": "%(message)s", "pathname": "%(pathname)s", "lineno": %(lineno)d, "funcName": "%(funcName)s", "process": %(process)d, "thread": %(thread)d, "service": "login"}',
            'datefmt': '%Y-%m-%dT%H:%M:%S.%fZ',
            'style': '%',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },
    'handlers': {
        # Primary handler for Kubernetes - JSON logs to stdout
        'console_json': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'json_kubernetes',
        },
        # Development console handler
        'console_verbose': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        # Optional file handlers (controlled by USE_FILE_LOGGING)
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': ERROR_LOG or '/dev/null',
            'when': 'midnight',
            'backupCount': 7,
            'formatter': 'json_kubernetes',
        } if USE_FILE_LOGGING and ERROR_LOG else {
            'level': 'ERROR',
            'class': 'logging.NullHandler',
        },
        'file_info': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': INFO_LOG or '/dev/null',
            'when': 'midnight',
            'backupCount': 7,
            'formatter': 'json_kubernetes',
        } if USE_FILE_LOGGING and INFO_LOG else {
            'level': 'INFO',
            'class': 'logging.NullHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # Root logger
        '': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        # Django core loggers
        'django': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django.request': {
            'handlers': (['console_json'] if USE_JSON_LOGGING else ['console_verbose']) + ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'WARNING',
            'propagate': False,
        },
        # ASGI/WebSocket loggers (for chat and pong services)
        'daphne': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'INFO',
            'propagate': False,
        },
        'channels': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'INFO',
            'propagate': False,
        },
        'websockets': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'INFO',
            'propagate': False,
        },
        # Service-specific loggers
        'login': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'DEBUG' if os.getenv('DEBUG', 'False').lower() == 'true' else 'INFO',
            'propagate': False,
        },
        'my_login': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'DEBUG' if os.getenv('DEBUG', 'False').lower() == 'true' else 'INFO',
            'propagate': False,
        },
        # Additional app-specific loggers
        'task_app': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'DEBUG' if os.getenv('DEBUG', 'False').lower() == 'true' else 'INFO',
            'propagate': False,
        },
        'user_app': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'DEBUG' if os.getenv('DEBUG', 'False').lower() == 'true' else 'INFO',
            'propagate': False,
        },
        'pong_app': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'DEBUG' if os.getenv('DEBUG', 'False').lower() == 'true' else 'INFO',
            'propagate': False,
        },
        'my_notifications': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'DEBUG' if os.getenv('DEBUG', 'False').lower() == 'true' else 'INFO',
            'propagate': False,
        },
        'api_docs': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'DEBUG' if os.getenv('DEBUG', 'False').lower() == 'true' else 'INFO',
            'propagate': False,
        },
        # Third-party library loggers
        'redis': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'WARNING',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'INFO',
            'propagate': False,
        },
        'oauth2_provider': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'INFO',
            'propagate': False,
        },
        'corsheaders': {
            'handlers': ['console_json'] if USE_JSON_LOGGING else ['console_verbose'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}
