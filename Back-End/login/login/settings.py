"""
Django settings for login project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os
from datetime import datetime
import secrets

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-kp7qs)0l1ie$%muo93+829po%pe9*gz8z8ah6dy0)cskj-5l*c')
#'django-insecure-kp7qs)0l1ie$%muo93+829po%pe9*gz8z8ah6dy0)cskj-5l*c'
API_KEY = os.getenv('API_KEY', '123')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', True)

def ensure_scheme(urls):
    """Add 'http://' scheme to URLs that don't have one"""
    if isinstance(urls, str):
        if not urls.startswith(('http://', 'https://')):
            return f"http://{urls}"
        return urls
    
    # Handle lists
    result = []
    for url in urls:
        if url and not url.startswith(('http://', 'https://')):
            result.append(f"http://{url}")
        else:
            result.append(url)
    return result

Microservices = {
	'Login': ensure_scheme(os.getenv('LOGIN_URL', 'http://localhost:8000')),
	'Chat': ensure_scheme(os.getenv('CHAT_URL', 'http://localhost:8001')),
	'Users': ensure_scheme(os.getenv('USER_URL', 'http://localhost:8002')),
	'Notifications': ensure_scheme(os.getenv('NOTIFICATIONS_URL', 'http://localhost:8003')),
	'Pong': ensure_scheme(os.getenv('PONG_URL', 'http://localhost:8004')),
}

K8S_ALLOWED_HOSTS = os.environ.get('K8S_ALLOWED_HOSTS', '10.0.0.0/8,172.16.0.0/12,192.168.0.0/16').split(',')

def extract_hostname(url):
	"""Estrae il nome host da un URL completo."""
	if not url:
		return url
	# Rimuovi http:// o https://
	if url.startswith(('http://', 'https://')):
		url = url.split('://', 1)[1]
	# Rimuovi la porta se presente
	if ':' in url:
		url = url.split(':', 1)[0]
	return url

K8S_SERVICE_HOSTS = [
	extract_hostname(Microservices['Login']),
	extract_hostname(Microservices['Chat']),
	extract_hostname(Microservices['Users']),
	extract_hostname(Microservices['Notifications']),
	extract_hostname(Microservices['Pong']),
]

# Add additional service hosts from environment if provided
# if os.environ.get('K8S_SERVICE_HOSTS'):
# 	additional_hosts = os.environ.get('K8S_SERVICE_HOSTS').split(',')
# 	K8S_SERVICE_HOSTS.extend([host.strip() for host in additional_hosts if host.strip()])

ALLOWED_HOSTS = [
	'localhost',
	'localhost:3000',
	'127.0.0.1',
	'[::1]',
	'trascendence.42firenze.it',
	Microservices['Login'],
	Microservices['Chat'],
	Microservices['Users'],
	Microservices['Notifications'],
	Microservices['Pong'],
]  + K8S_SERVICE_HOSTS

CORS_ALLOWED_ORIGINS = [
	'http://localhost:3000',
	'http://localhost',
	'http://127.0.0.1',
	'http://[::1]',
	'https://trascendence.42firenze.it',
	Microservices['Login'],
	Microservices['Chat'],
	Microservices['Users'],
	Microservices['Notifications'],
	Microservices['Pong'],
]  + ensure_scheme(K8S_SERVICE_HOSTS)
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

CSRF_TRUSTED_ORIGINS = [
	'http://localhost:3000',
	'http://localhost',
	'http://127.0.0.1',
	'http://[::1]',
	'https://trascendence.42firenze.it',
	Microservices['Login'],
	Microservices['Chat'],
	Microservices['Users'],
	Microservices['Notifications'],
	Microservices['Pong'],
]  + ensure_scheme(K8S_SERVICE_HOSTS)

CORS_ALLOW_HEADERS = [
	'accept',
	'accept-encoding',
	'authorization',
	'content-type',
	'dnt',
	'origin',
	'user-agent',
	'x-csrftoken',
	'x-requested-with',
]

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'rest_framework',
	'rest_framework_simplejwt',
	'my_login',
	'corsheaders',
	'oauth2_provider',
]

MIDDLEWARE = [
	'my_login.middleware.HealthCheckMiddleware',
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'corsheaders.middleware.CorsMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'login.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'login.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
	'default': {
	'ENGINE': 'django.db.backends.postgresql',
	'NAME': os.getenv('POSTGRES_DB', 'login_db'),
	'USER': os.getenv('POSTGRES_USER', 'pasquale'),
	'PASSWORD': os.getenv('POSTGRES_PASSWORD', '123'),
	'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
	'PORT': os.getenv('POSTGRES_PORT', '5435'),
	},
	'backup': {
	'ENGINE': 'django.db.backends.sqlite3',
	'NAME': str(BASE_DIR / 'db.sqlite3'),
	}
}

#user model
AUTH_USER_MODEL = 'my_login.AppUser'

REST_FRAMEWORK = {
	'DEFAULT_AUTHENTICATION_CLASSES': (
		'rest_framework_simplejwt.authentication.JWTAuthentication',
		'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
	),
	'DEFAULT_PERMISSION_CLASSES': (
		'rest_framework.permissions.IsAuthenticated',
	),
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

OAUTH2_PROVIDER = {
	'ACCESS_TOKEN_EXPIRE_SECONDS': 36000,
	'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,
	'REFRESH_TOKEN_EXPIRE_SECONDS': 36000,
	'ROTATE_REFRESH_TOKENS': True,
	'SCOPES': {
		'read': 'Read scope',
		'write': 'Write scope',
		'groups': 'Access to your groups',
	},
	# 'OAUTH2_VALIDATOR_CLASS': 'oauth2_provider.oauth2_validators.OAuth2Validator',
	'OAUTH2_VALIDATOR_CLASS': 'my_login.validations.CustomOAuth2Validator',
}

SIMPLE_JWT = {
	'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
	'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
	'ROTATE_REFRESH_TOKENS': True,
	'BLACKLIST_AFTER_ROTATION': True,
	'ALGORITHM': 'HS256',
	# 'ISSUER': 'login',
	'SIGNING_KEY': SECRET_KEY,
	'VERIFYING_KEY': None,
	'AUTH_HEADER_TYPES': ('Bearer',),
	'USER_ID_FIELD': 'user_id',
	'USER_ID_CLAIM': 'user_id',
	'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
	'TOKEN_TYPE_CLAIM': 'token_type',
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

client = {
	'CLIENT_ID' : os.getenv('CLIENT_ID', ''),
	'CLIENT_SECRET' : os.getenv('CLIENT_SECRET', ''),
}


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = '/home/lollo/Documents/challenge_fides/Back-End/login/staticfiles'
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SERVICE_PASSWORD = os.getenv('SERVICE_PASSWORD','123') # this is the password that the service will use to authenticate itself to the OAuth2 server

ADMIN = {
	'username': os.getenv('ADMIN_USERNAME', 'admin'),
	'email': os.getenv('ADMIN_EMAIL', 'admin@admin.com'),
	'password': os.getenv('ADMIN_PASSWORD', 'admin'),
}

OAUTH2_PROVIDERS = {
	'GOOGLE' : {
		'redirect_uri': 'http://trascendence.42firenze.it/api/login/login/oauth/callback/google/',
		'authorization_url': "https://accounts.google.com/o/oauth2/v2/auth",
		'token_url': "https://oauth2.googleapis.com/token",
		'scope': "https://www.googleapis.com/auth/userinfo.profile email&",
		'user_info_url': "https://www.googleapis.com/oauth2/v1/userinfo?alt=json",
		'client_id': os.getenv('GOOGLE_CLIENT_ID', 'pippo'),
		'client_secret': os.getenv('GOOGLE_CLIENT_SECRET', 'moltosegreto'),
	},
	'42' : {
		'redirect_uri': 'http://trascendence.42firenze.it/api/login/login/oauth/callback/42/',
		'authorization_url': "https://api.intra.42.fr/oauth/authorize",
		'token_url': "https://api.intra.42.fr/oauth/token",
		'scope': "public",
		'user_info_url': "https://api.intra.42.fr/v2/me",
		'client_id': os.getenv('42_CLIENT_ID', 'pippo'),
		'client_secret': os.getenv('42_CLIENT_SECRET', 'moltosegreto'),
	},
}

# LOGGING = {
# 	 'version': 1,
# 	 'disable_existing_loggers': False,
# 	 'handlers': {
# 		 'loki': {
# 			 'class': 'logging.StreamHandler',
# 			 'formatter': 'detailed',
# 			 'stream': 'ext://sys.stdout',  # Sends logs to stdout for Loki
# 		 },
# 	 },
# 	 'loggers': {
# 		 'django': {
# 			 'handlers': ['loki'],
# 			 'level': 'INFO',
# 			 'propagate': True,
# 		 },
# 	 },
# 	 'formatters': {
# 		 'detailed': {
# 			 'format': '{levelname} {asctime} {module} {message}',
# 			 'style': '{',
# 	 		},
# 		},
# }

# Set the log level based on the environment variable
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')

# Set base log directory
LOG_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOG_DIR, exist_ok=True)

# Log file paths
ERROR_LOG = os.path.join(LOG_DIR, f'error_{datetime.now().strftime("%Y-%m-%d")}.log')
INFO_LOG = os.path.join(LOG_DIR, f'info_{datetime.now().strftime("%Y-%m-%d")}.log')
DEBUG_LOG = os.path.join(LOG_DIR, f'debug_{datetime.now().strftime("%Y-%m-%d")}.log')
DAPHNE_LOG = os.path.join(LOG_DIR, f'daphne_{datetime.now().strftime("%Y-%m-%d")}.log')
CHANNEL_LOG = os.path.join(LOG_DIR, f'channels_{datetime.now().strftime("%Y-%m-%d")}.log')

# Logging configuration
LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'verbose': {
			'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
			'style': '{',
        },
		'json': {
			'format': '{"time": "%(asctime)s", "level": "%(levelname)s", "module": "%(module)s", "message": "%(message)s", "path": "%(pathname)s", "lineno": %(lineno)d}',
			'style': '%',
		},
		'simple': {
			'format': '{levelname} {message}',
			'style': '{',
		},
	},
	'filters': {
		'require_debug_true': {
			'()': 'django.utils.log.RequireDebugTrue',
		},
		'require_debug_false': {
			'()': 'django.utils.log.RequireDebugFalse',
		},
	},
	'handlers': {
		'console': {
			'level': 'DEBUG',
			'class': 'logging.StreamHandler',
			'formatter': 'verbose',
		},
        'light_console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
		'file_error': {
			'level': 'ERROR',
			'class': 'logging.handlers.TimedRotatingFileHandler',
			'filename': ERROR_LOG,
			'when': 'midnight',
			'backupCount': 30,
			'formatter': 'json',
		},
		'file_info': {
			'level': 'INFO',
			'class': 'logging.handlers.TimedRotatingFileHandler',
			'filename': INFO_LOG,
			'when': 'midnight',
			'backupCount': 30,
			'formatter': 'json',
		},
		'file_debug': {
			'level': 'DEBUG',
			'class': 'logging.handlers.TimedRotatingFileHandler',
			'filename': DEBUG_LOG,
			'when': 'midnight',
			'backupCount': 10,
			'formatter': 'json',
			'filters': ['require_debug_true'],
		},
		'daphne': {
			'level': 'INFO',
			'class': 'logging.handlers.TimedRotatingFileHandler',
			'filename': DAPHNE_LOG,
			'when': 'midnight',
			'backupCount': 30,
			'formatter': 'json',
		},
		'channels': {
			'level': 'INFO',
			'class': 'logging.handlers.TimedRotatingFileHandler',
			'filename': CHANNEL_LOG,
			'when': 'midnight',
			'backupCount': 30,
			'formatter': 'json',
		},
		'mail_admins': {
			'level': 'ERROR',
			'class': 'django.utils.log.AdminEmailHandler',
			'filters': ['require_debug_false'],
			'formatter': 'verbose',
		},
	},
	'loggers': {
		'django': {
			'handlers': ['console', 'file_info', 'file_error'],
			'level': LOG_LEVEL,
			'propagate': True,
		},
		'django.request': {
			'handlers': ['file_error', 'mail_admins'],
			'level': 'ERROR',
			'propagate': False,
		},
		'django.server': {
			'handlers': ['file_info', 'file_error'],
			'level': 'INFO',
			'propagate': False,
		},
		'django.db.backends': {
			'handlers': ['file_debug'],
			'level': 'DEBUG' if DEBUG else 'INFO',
			'propagate': False,
		},
		'daphne': {
			'handlers': ['daphne', 'console'],
			'level': 'INFO',
			'propagate': False,
		},
		'channels': {
			'handlers': ['channels', 'console'],
			'level': 'INFO',
			'propagate': False,
		},
		'login': {
			'handlers': ['console'],
            'level': 'DEBUG',
			'propagate': False,
		},
        'light_login': {
            'handlers': ['light_console'],
            'level': 'DEBUG',
            'propagate': False,
        },
		'websockets': {
			'handlers': ['console', 'channels'],
			'level': 'INFO',
			'propagate': False,
		},
	},
}
